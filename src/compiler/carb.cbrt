#include "./syntaxTree/base.hpp"
#include "./syntaxTree/function.hpp"
#include "./syntaxTree/statements.hpp"
#include "./syntaxTree/expressions.hpp"
#include "./syntaxTree/constructs.hpp"
#include "./syntaxTree/literals.hpp"

#include <cstdlib>
#include <string>
#include <utility>

%no_externc
%prefix carb_

%header%
#include "./syntaxTree/base.hpp"
%%



%scanner%
%common_class TokenInfo

$:
{
	$._row = $line;
	$._endRow = $endline;
	$._col = $column;
	$._endCol = $endcolumn;
	$._off = $offset;
	$._endOff = $endoffset;
}

: [\ \t\n]+;	/* Skips whitespace. */
ASSIGN: =;
SEMICOL: \;;
COMMA: \,;
PLUS: \+;
MINUS: \-;
ASTERISK: \*;
SLASH: /;
PERCENT: %;
INC: \+\+;
DEC: \-\-;
AND: &;
OR: \|;
XOR: \^;
COMP: ~;
SHR: >>;
SHL: <<;
LAND: &&;
LOR: \|\|;
DENY: !;
EQ: ==;
NE: !=;
GT: >;
LT: <;
GE: >=;
LE: <=;
LPAREN: \(;
RPAREN: \);
LCURLY: \{;
RCURLY: \};
IF: if;
ELSE: else;
MATCH: match;
FOR: for;
LOOP: loop;
WHILE: while;
TRUE: true;
FALSE: false;
BREAK: break;
RETURN: return;
DECIMAL: [0-9]+ { $$ = std::atoi($text); }
ID: [a-zA-Z_][a-zA-Z0-9_]* { $$ = $text; }
STRING: \".*\" { $$ = $text; }

%token ASSIGN SEMICOL COMMA PLUS MINUS ASTERISK SLASH PERCENT INC DEC AND OR XOR COMP SHR SHL LAND
%token LOR DENY EQ NE GT LT GE LE LPAREN RPAREN LCURLY RCURLY DECIMAL ID STRING IF ELSE MATCH FOR
%token LOOP WHILE TRUE FALSE BREAK RETURN

%type DECIMAL: int
%class ID STRING: std::string
/* Not sure what else to put here for now. */
%token_type int


%nt globals global type function_def param_list param_list_tail param statement compound_stmt
%nt statements var_def_stmt expression expression_stmt assignment_expr if_expr for_expr loop_expr
%nt while_expr break_stmt return_stmt expr_maybe primary_expr arg_list arg_list_tail pre_expr
%nt multiplicative_expr additive_expr shift_expr relative_expr absolute_expr bit_and_expr
%nt bit_xor_expr bit_or_expr logic_and_expr logic_or_expr literal boolean


%grammar%
%params std::vector<SyntaxTreeNode*>& output

globals: global globals
	{ output.push_back($0); }
globals: ;

%class global: SyntaxTreeNode*
global: function_def
	{ $$ = $0; }
global: var_def_stmt
	{ $$ = $0; }

%class type: Type*
type: ID
	{
		$ = ${0};
		$$ = Type::Create($0);
	}

%class function_def: Function*
function_def: type ID LPAREN param_list RPAREN LCURLY statements RCURLY
	{
		Function* fn {new Function($0, $1, std::move($3), $6)};
		fn->SetSymbolInfo(${1});
		$$ = fn;
	}

%class param_list: Function::ParamList
param_list: param param_list_tail
	{
		Function::ParamList l {std::move($1)};
		l.emplace_back($0);
		$$ = std::move(l);
	}
param_list:
	{ $$ = Function::ParamList(); }

%class param_list_tail: Function::ParamList
param_list_tail: COMMA param param_list_tail
	{
		Function::ParamList l {std::move($2)};
		l.emplace_back($1);
		$$ = std::move(l);
	}
param_list_tail:
	{ $$ = Function::ParamList(); }

%class param: Parameter*
param: type ID
	{
		Parameter* param {new Parameter($0, $1)};
		param->SetSymbolInfo(${1});
		$$ = param;
	}

%class statement: Statement*
statement: compound_stmt
	{ $$ = $0; }
statement: var_def_stmt
	{ $$ = $0; }
statement: expression
	{ $$ = $0; }
statement: expression_stmt
	{ $$ = $0; }
statement: break_stmt
	{ $$ = $0; }
statement: return_stmt
	{ $$ = $0; }

%class compound_stmt: CompoundStmt*
compound_stmt: LCURLY statements RCURLY
	{ $$ = new CompoundStmt($1); }

%class statements: StmtList
statements: statement statements
	{
		StmtList l {$1};
		l.push_back($0);
		$$ = l;
	}
statements:
	{ $$ = StmtList(); }

%class var_def_stmt: VariableDef*
var_def_stmt: type ID ASSIGN expression SEMICOL
	{
		VariableDef* def {new VariableDef($0, $1, $3)};
		def->SetSymbolInfo(${1});
		$$ = def;
	}

%class expression: Expression*
expression: assignment_expr
	{ $$ = $0; }
expression: if_expr
	{ $$ = $0; }
expression: for_expr
	{ $$ = $0; }
expression: loop_expr
	{ $$ = $0; }
expression: while_expr
	{ $$ = $0; }
expression: logic_or_expr
	{ $$ = $0; }

%class expression_stmt: ExprStmt*
expression_stmt: expression SEMICOL
	{ $$ = new ExprStmt($0); }

%class assignment_expr: AssignmentExpr*
assignment_expr: ID ASSIGN expression
	{
		AssignmentExpr* expr {new AssignmentExpr($0, $2)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}

%class if_expr: IfExpr*
if_expr: IF LPAREN expression RPAREN statement
	{ $$ = new IfExpr($2, $4, nullptr); }
if_expr: IF LPAREN expression RPAREN statement ELSE statement
	{ $$ = new IfExpr($2, $4, $6); }

%class for_expr: ForExpr*
for_expr: FOR LPAREN expr_maybe SEMICOL expr_maybe SEMICOL expr_maybe RPAREN statement
	{ $$ = new ForExpr($2, $4, $6, $8); }

%class loop_expr: LoopExpr*
loop_expr: LOOP statement
	{ $$ = new LoopExpr($1); }

%class while_expr: WhileExpr*
while_expr: WHILE LPAREN expression RPAREN statement
	{ $$ = new WhileExpr($2, $4); }

%class break_stmt: BreakStmt*
break_stmt: BREAK expr_maybe SEMICOL
	{ $$ = new BreakStmt($1); }
break_stmt: BREAK LPAREN DECIMAL RPAREN expr_maybe SEMICOL
	{ $$ = new BreakStmt($4, $2); }

%class return_stmt: ReturnStmt*
return_stmt: RETURN expr_maybe SEMICOL
	{ $$ = new ReturnStmt($1); }

%class expr_maybe: Expression*
expr_maybe: expression
	{ $$ = $0; }
expr_maybe:
	{ $$ = nullptr; }


%class primary_expr: Expression*
primary_expr: LPAREN expression RPAREN
	{ $$ = $1; }
primary_expr: ID LPAREN arg_list RPAREN
	{
		Invocation* inv {new Invocation($0, std::move($2))};
		inv->SetSymbolInfo(${0});
		$$ = inv;
	}
primary_expr: literal
	{ $$ = $0; }

%class arg_list: Invocation::ArgList
arg_list: expression arg_list_tail
	{
		Invocation::ArgList l {std::move($1)};
		l.emplace_back($0);
		$$ = std::move(l);
	}
arg_list:
	{ $$ = Invocation::ArgList(); }

%class arg_list_tail: Invocation::ArgList
arg_list_tail: COMMA expression arg_list_tail
	{
		Invocation::ArgList l {std::move($2)};
		l.emplace_back($1);
		$$ = std::move(l);
	}
arg_list_tail:
	{ $$ = Invocation::ArgList(); }

%class pre_expr: Expression*
pre_expr: primary_expr
	{ $$ = static_cast<PreExpr*>($0); }
pre_expr: PLUS primary_expr
	{
		PreExpr* expr {new PreExpr($1, PreExpr::Ops::Pos)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}
pre_expr: MINUS primary_expr
	{
		PreExpr* expr {new PreExpr($1, PreExpr::Ops::Neg)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}
pre_expr: INC primary_expr
	{
		PreExpr* expr {new PreExpr($1, PreExpr::Ops::Inc)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}
pre_expr: DEC primary_expr
	{
		PreExpr* expr {new PreExpr($1, PreExpr::Ops::Dec)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}
pre_expr: DENY primary_expr
	{
		PreExpr* expr {new PreExpr($1, PreExpr::Ops::Deny)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}
pre_expr: COMP primary_expr
	{
		PreExpr* expr {new PreExpr($1, PreExpr::Ops::Comp)};
		expr->SetSymbolInfo(${0});
		$$ = expr;
	}

%class multiplicative_expr: Expression*
multiplicative_expr: pre_expr
	{ $$ = $0; }
multiplicative_expr: multiplicative_expr ASTERISK pre_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::Mul)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
multiplicative_expr: multiplicative_expr SLASH pre_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::Div)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
multiplicative_expr: multiplicative_expr PERCENT pre_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::Mod)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class additive_expr: Expression*
additive_expr: multiplicative_expr
	{ $$ = $0; }
additive_expr: additive_expr PLUS multiplicative_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::Add)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
additive_expr: additive_expr MINUS multiplicative_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::Sub)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class shift_expr: Expression*
shift_expr: additive_expr
	{ $$ = $0; }
shift_expr: shift_expr SHL additive_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::LShift)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
shift_expr: shift_expr SHR additive_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::RShift)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class relative_expr: Expression*
relative_expr: shift_expr
	{ $$ = $0; }
relative_expr: relative_expr LT shift_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::LT)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
relative_expr: relative_expr LE shift_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::LE)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
relative_expr: relative_expr GT shift_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::GT)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
relative_expr: relative_expr GE shift_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::GE)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class absolute_expr: Expression*
absolute_expr: relative_expr
	{ $$ = $0; }
absolute_expr: absolute_expr EQ relative_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::Eq)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}
absolute_expr: absolute_expr NE relative_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::NE)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class bit_and_expr: Expression*
bit_and_expr: absolute_expr
	{ $$ = $0; }
bit_and_expr: bit_and_expr AND absolute_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::AND)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class bit_xor_expr: Expression*
bit_xor_expr: bit_and_expr
	{ $$ = $0; }
bit_xor_expr: bit_xor_expr XOR bit_and_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::XOR)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class bit_or_expr: Expression*
bit_or_expr: bit_xor_expr
	{ $$ = $0; }
bit_or_expr: bit_or_expr OR bit_xor_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::OR)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class logic_and_expr: Expression*
logic_and_expr: bit_or_expr
	{ $$ = $0; }
logic_and_expr: logic_and_expr LAND bit_or_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::LAND)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}

%class logic_or_expr: Expression*
logic_or_expr: logic_and_expr
	{ $$ = $0; }
logic_or_expr: logic_or_expr LOR logic_and_expr
	{
		BinaryExpr* expr {new BinaryExpr($0, $2, BinaryExpr::Ops::LOR)};
		expr->SetSymbolInfo(${1});
		$$ = expr;
	}


%class literal: Literal*
literal: ID
	{
		Identifier* id {new Identifier($0)};
		id->SetSymbolInfo(${0});
		$$ = id;
	}
literal: DECIMAL
	{
		IntLiteral* lit {new IntLiteral($0)};
		lit->SetSymbolInfo(${0});
		$$ = lit;
	}
literal: boolean
	{
		BoolLiteral* lit {new BoolLiteral($0)};
		lit->SetSymbolInfo(${0});
		$$ = lit;
	}
literal: STRING
	{
		StrLiteral* lit {new StrLiteral($0)};
		lit->SetSymbolInfo(${0});
		$$ = lit;
	}

%type boolean: bool
boolean: TRUE
	{
		$ = ${0};
		$$ = true;
	}
boolean: FALSE
	{
		$ = ${0};
		$$ = false;
	}



%prefer additive_expr: additive_expr * MINUS multiplicative_expr
%over shift_expr: additive_expr *

%prefer additive_expr: additive_expr * PLUS multiplicative_expr
%over shift_expr: additive_expr *

%prefer shift_expr: shift_expr SHR additive_expr *
%over additive_expr: additive_expr * MINUS multiplicative_expr

%prefer shift_expr: shift_expr SHR additive_expr *
%over additive_expr: additive_expr * PLUS multiplicative_expr

%prefer shift_expr: shift_expr SHL additive_expr *
%over additive_expr: additive_expr * MINUS multiplicative_expr

%prefer shift_expr: shift_expr SHL additive_expr *
%over additive_expr: additive_expr * PLUS multiplicative_expr

%prefer primary_expr: ID * LPAREN arg_list RPAREN
%over literal: ID *

%prefer expression_stmt: expression * SEMICOL
%over statement: expression *

%prefer break_stmt: BREAK LPAREN DECIMAL * RPAREN expr_maybe SEMICOL
%over literal: DECIMAL *

%prefer type: ID *
%over literal: ID *
