#include "./syntaxTree/base.hpp"
#include "./syntaxTree/function.hpp"
#include "./syntaxTree/statements.hpp"
#include "./syntaxTree/expressions.hpp"
#include "./syntaxTree/constructs.hpp"
#include "./syntaxTree/literals.hpp"

#include <cstdlib>
#include <string>

%no_externc

%header%
#include "./syntaxTree/base.hpp"
%%


%scanner%
%prefix carb_

: [\ \t\n]+;	/* Skips whitespace. */
ASSIGN: =;
SEMICOL: \;;
COMMA: \,;
PLUS: \+;
MINUS: \-;
ASTERISK: \*;
SLASH: /;
PERCENT: %;
INC: \+\+;
DEC: \-\-;
AND: &;
OR: \|;
XOR: \^;
COMP: ~;
SHR: >>;
SHL: <<;
LAND: &&;
LOR: \|\|;
DENY: !;
EQ: ==;
NE: !=;
GT: >;
LT: <;
GE: >=;
LE: <=;
LPAREN: \(;
RPAREN: \);
LCURLY: \{;
RCURLY: \};
IF: if;
ELSE: else;
MATCH: match;
FOR: for;
LOOP: loop;
WHILE: while;
TRUE: true;
FALSE: false;
BREAK: break;
RETURN: return;
DECIMAL: [0-9]+ { $$ = std::atoi($text); }
ID: [a-zA-Z_][a-zA-Z0-9_]* { $$ = $text; }
STRING: \".*\" { $$ = $text; }

%token ASSIGN SEMICOL COMMA PLUS MINUS ASTERISK SLASH PERCENT INC DEC AND OR XOR COMP SHR SHL LAND
%token LOR DENY EQ NE GT LT GE LE LPAREN RPAREN LCURLY RCURLY DECIMAL ID STRING IF ELSE MATCH FOR
%token LOOP WHILE TRUE FALSE BREAK RETURN

%type DECIMAL: int
%class ID STRING: std::string
/* Not sure what else to put here for now. */
%token_type int


%nt globals global function_def param_list param_list_tail param statement compound_stmt statements
%nt var_def_stmt expression expression_stmt assignment_expr if_expr for_expr loop_expr while_expr
%nt break_stmt return_stmt expr_maybe primary_expr arg_list arg_list_tail pre_expr
%nt multiplicative_expr additive_expr shift_expr relative_expr absolute_expr bit_and_expr
%nt bit_xor_expr bit_or_expr logic_and_expr logic_or_expr literal boolean


%grammar%
%params std::vector<SyntaxNode*>& output

globals: global globals
	{ output.push_back($0); }
globals: ;

%class global: SyntaxNode*
global: function_def
	{ $$ = $0; }
global: var_def_stmt
	{ $$ = $0; }

%class function_def: FunctionNode*
function_def: ID ID LPAREN param_list RPAREN LCURLY statements RCURLY
	{ $$ = new FunctionNode($0, $1, $3, $6); }

%class param_list: FunctionNode::ParamList
param_list: param param_list_tail
	{
		FunctionNode::ParamList l {$1};
		l.push_back($0);
		$$ = l;
	}
param_list:
	{ $$ = FunctionNode::ParamList(); }

%class param_list_tail: FunctionNode::ParamList
param_list_tail: COMMA param param_list_tail
	{
		FunctionNode::ParamList l {$2};
		l.push_back($1);
		$$ = l;
	}
param_list_tail:
	{ $$ = FunctionNode::ParamList(); }

%class param: FunctionNode::Param
param: ID ID
	{ $$ = std::pair($0, $1); }

%class statement: StmtNode*
statement: compound_stmt
	{ $$ = $0; }
statement: var_def_stmt
	{ $$ = $0; }
statement: expression
	{ $$ = $0; }
statement: expression_stmt
	{ $$ = $0; }
statement: break_stmt
	{ $$ = $0; }
statement: return_stmt
	{ $$ = $0; }

%class compound_stmt: CompoundStmtNode*
compound_stmt: LCURLY statements RCURLY
	{ $$ = new CompoundStmtNode($1); }

%class statements: StmtList
statements: statement statements
	{
		StmtList l {$1};
		l.push_back($0);
		$$ = l;
	}
statements:
	{ $$ = StmtList(); }

%class var_def_stmt: VarDefStmtNode*
var_def_stmt: ID ID ASSIGN expression SEMICOL
	{ $$ = new VarDefStmtNode($0, $1, $3); }

%class expression: ExprNode*
expression: assignment_expr
	{ $$ = $0; }
expression: if_expr
	{ $$ = $0; }
expression: for_expr
	{ $$ = $0; }
expression: loop_expr
	{ $$ = $0; }
expression: while_expr
	{ $$ = $0; }
expression: logic_or_expr
	{ $$ = $0; }

%class expression_stmt: ExprStmtNode*
expression_stmt: expression SEMICOL
	{ $$ = new ExprStmtNode($0); }

%class assignment_expr: AssignExprNode*
assignment_expr: ID ASSIGN expression
	{$$ = new AssignExprNode($0, $2); }

%class if_expr: IfExprNode*
if_expr: IF LPAREN expression RPAREN statement
	{ $$ = new IfExprNode($2, $4, nullptr); }
if_expr: IF LPAREN expression RPAREN statement ELSE statement
	{ $$ = new IfExprNode($2, $4, $6); }

%class for_expr: ForExprNode*
for_expr: FOR LPAREN expr_maybe SEMICOL expr_maybe SEMICOL expr_maybe RPAREN statement
	{ $$ = new ForExprNode($2, $4, $6, $8); }

%class loop_expr: LoopExprNode*
loop_expr: LOOP statement
	{ $$ = new LoopExprNode($1); }

%class while_expr: WhileExprNode*
while_expr: WHILE LPAREN expression RPAREN statement
	{ $$ = new WhileExprNode($2, $4); }

%class break_stmt: BreakStmtNode*
break_stmt: BREAK expr_maybe SEMICOL
	{ $$ = new BreakStmtNode($1); }
break_stmt: BREAK LPAREN DECIMAL RPAREN expr_maybe SEMICOL
	{ $$ = new BreakStmtNode($4, $2); }

%class return_stmt: ReturnStmtNode*
return_stmt: RETURN expr_maybe SEMICOL
	{ $$ = new ReturnStmtNode($1); }

%class expr_maybe: ExprNode*
expr_maybe: expression
	{ $$ = $0; }
expr_maybe:
	{ $$ = nullptr; }


%class primary_expr: ExprNode*
primary_expr: LPAREN expression RPAREN
	{ $$ = $1; }
primary_expr: ID LPAREN arg_list RPAREN
	{ $$ = new InvokeNode($0, $2); }
primary_expr: literal
	{ $$ = $0; }

%class arg_list: InvokeNode::ArgList
arg_list: expression arg_list_tail
	{
		InvokeNode::ArgList l {$1};
		l.push_back($0);
		$$ = l;
	}
arg_list:
	{ $$ = InvokeNode::ArgList(); }

%class arg_list_tail: InvokeNode::ArgList
arg_list_tail: COMMA expression arg_list_tail
	{
		InvokeNode::ArgList l {$2};
		l.push_back($1);
		$$ = l;
	}
arg_list_tail:
	{ $$ = InvokeNode::ArgList(); }

%class pre_expr: ExprNode*
pre_expr: primary_expr
	{ $$ = static_cast<PreExprNode*>($0); }
pre_expr: PLUS primary_expr
	{ $$ = new PreExprNode($1, PreExprNode::Ops::Pos); }
pre_expr: MINUS primary_expr
	{ $$ = new PreExprNode($1, PreExprNode::Ops::Neg); }
pre_expr: INC primary_expr
	{ $$ = new PreExprNode($1, PreExprNode::Ops::Inc); }
pre_expr: DEC primary_expr
	{ $$ = new PreExprNode($1, PreExprNode::Ops::Dec); }
pre_expr: DENY primary_expr
	{ $$ = new PreExprNode($1, PreExprNode::Ops::Deny); }
pre_expr: COMP primary_expr
	{ $$ = new PreExprNode($1, PreExprNode::Ops::Comp); }

%class multiplicative_expr: ExprNode*
multiplicative_expr: pre_expr
	{ $$ = $0; }
multiplicative_expr: multiplicative_expr ASTERISK pre_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Mul); }
multiplicative_expr: multiplicative_expr SLASH pre_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Div); }
multiplicative_expr: multiplicative_expr PERCENT pre_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Mod); }

%class additive_expr: ExprNode*
additive_expr: multiplicative_expr
	{ $$ = $0; }
additive_expr: additive_expr PLUS multiplicative_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Add); }
additive_expr: additive_expr MINUS multiplicative_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Sub); }

%class shift_expr: ExprNode*
shift_expr: additive_expr
	{ $$ = $0; }
shift_expr: shift_expr SHL additive_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::LShift); }
shift_expr: shift_expr SHR additive_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::RShift); }

%class relative_expr: ExprNode*
relative_expr: shift_expr
	{ $$ = $0; }
relative_expr: relative_expr LT shift_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Less); }
relative_expr: relative_expr LE shift_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::LessEq); }
relative_expr: relative_expr GT shift_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::More); }
relative_expr: relative_expr GE shift_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::MoreEq); }

%class absolute_expr: ExprNode*
absolute_expr: relative_expr
	{ $$ = $0; }
absolute_expr: absolute_expr EQ relative_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Eq); }
absolute_expr: absolute_expr NE relative_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::Neq); }

%class bit_and_expr: ExprNode*
bit_and_expr: absolute_expr
	{ $$ = $0; }
bit_and_expr: bit_and_expr AND absolute_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::AND); }

%class bit_xor_expr: ExprNode*
bit_xor_expr: bit_and_expr
	{ $$ = $0; }
bit_xor_expr: bit_xor_expr XOR bit_and_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::XOR); }

%class bit_or_expr: ExprNode*
bit_or_expr: bit_xor_expr
	{ $$ = $0; }
bit_or_expr: bit_or_expr OR bit_xor_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::OR); }

%class logic_and_expr: ExprNode*
logic_and_expr: bit_or_expr
	{ $$ = $0; }
logic_and_expr: logic_and_expr LAND bit_or_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::LAND); }

%class logic_or_expr: ExprNode*
logic_or_expr: logic_and_expr
	{ $$ = $0; }
logic_or_expr: logic_or_expr LOR logic_and_expr
	{ $$ = new BinaryExprNode($0, $2, BinaryExprNode::Ops::LOR); }


%class literal: LiteralNode*
literal: ID
	{ $$ = new IDNode($0); }
literal: DECIMAL
	{ $$ = new DecimalNode($0); }
literal: boolean
	{ $$ = new BoolNode($0); }
literal: STRING
	{ $$ = new StrNode($0); }

%type boolean: bool
boolean: TRUE
	{ $$ = true; }
boolean: FALSE
	{ $$ = false; }



%prefer additive_expr: additive_expr * MINUS multiplicative_expr
%over shift_expr: additive_expr *

%prefer additive_expr: additive_expr * PLUS multiplicative_expr
%over shift_expr: additive_expr *

%prefer shift_expr: shift_expr SHR additive_expr *
%over additive_expr: additive_expr * MINUS multiplicative_expr

%prefer shift_expr: shift_expr SHR additive_expr *
%over additive_expr: additive_expr * PLUS multiplicative_expr

%prefer shift_expr: shift_expr SHL additive_expr *
%over additive_expr: additive_expr * MINUS multiplicative_expr

%prefer shift_expr: shift_expr SHL additive_expr *
%over additive_expr: additive_expr * PLUS multiplicative_expr

%prefer primary_expr: ID * LPAREN arg_list RPAREN
%over literal: ID *

%prefer expression_stmt: expression * SEMICOL
%over statement: expression *

%prefer break_stmt: BREAK LPAREN DECIMAL * RPAREN expr_maybe SEMICOL
%over literal: DECIMAL *

%prefer var_def_stmt: ID * ID ASSIGN expression SEMICOL
%over literal: ID *
